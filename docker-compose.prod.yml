# Docker Compose Production Environment
# 사용법: docker-compose -f docker-compose.yaml -f docker-compose.prod.yml up

services:
  # Production environment - strict resource limits
  redis:
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
        reservations:
          cpus: '0.05'
          memory: 32M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    # Production에서는 포트를 내부적으로만 사용
    ports: []

  db:
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    # Production에서는 포트를 내부적으로만 사용
    ports: []
    # Production 최적화된 PostgreSQL 설정
    command: >
      postgres
      -c max_connections=50
      -c shared_buffers=32MB
      -c effective_cache_size=96MB
      -c maintenance_work_mem=8MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=2MB
      -c default_statistics_target=100

  fastify-member-server:
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
        reservations:
          cpus: '0.15'
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    # Production에서는 포트를 내부적으로만 사용
    ports: []
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max-old-space-size=200

  koa-auth-server:
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    # Production에서는 포트를 내부적으로만 사용
    ports: []
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max-old-space-size=100

  bff-server:
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    # Production에서는 포트를 내부적으로만 사용
    ports: []
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max-old-space-size=100

  proxy-server:
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
        reservations:
          cpus: '0.05'
          memory: 32M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    environment:
      - NODE_ENV=production

  ecommerce-app:
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
        reservations:
          cpus: '0.15'
          memory: 128M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    # Production에서는 Next.js 포트를 내부적으로만 사용
    ports: []
    environment:
      - NODE_ENV=production
      - NODE_OPTIONS=--max-old-space-size=200

  kong:
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
    # Production에서는 Admin API 포트를 노출하지 않음
    ports:
      - "8000:8000"  # Kong Proxy만 노출

  # Production 전용 nginx 로드밸런서 추가
  nginx:
    image: nginx:alpine
    container_name: nginx-lb
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - proxy-server
      - kong
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 64M
        reservations:
          cpus: '0.1'
          memory: 32M
    # SSL 인증서가 없을 때 컨테이너 시작 실패 방지
    command: >
      sh -c "
        if [ ! -f /etc/nginx/ssl/server.crt ] || [ ! -f /etc/nginx/ssl/server.key ]; then
          echo '⚠️  SSL 인증서가 없습니다. 자체 서명 인증서를 생성합니다...';
          apk add --no-cache openssl;
          mkdir -p /etc/nginx/ssl;
          openssl genrsa -out /etc/nginx/ssl/server.key 2048;
          openssl req -new -x509 -key /etc/nginx/ssl/server.key -out /etc/nginx/ssl/server.crt -days 365 \
            -subj '/C=KR/ST=Seoul/L=Seoul/O=Development/OU=IT/CN=localhost';
          chmod 600 /etc/nginx/ssl/server.key;
          chmod 644 /etc/nginx/ssl/server.crt;
          echo '✅ 자체 서명 SSL 인증서가 생성되었습니다.';
        fi;
        nginx -g 'daemon off;'
      "

#  docker-compose -f docker-compose.yaml -f docker-compose.prod.yml up --build
