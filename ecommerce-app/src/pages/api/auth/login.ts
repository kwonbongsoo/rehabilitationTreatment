import { createProxyHandler } from '../../../utils/proxyUtils';
import type { ProxyLoginResponse, LoginResponse } from '../../../api/models/auth';

// Î°úÍ∑∏Ïù∏ API ÌîÑÎ°ùÏãú Ìï∏Îì§Îü¨
export default createProxyHandler({
  method: 'POST',
  targetPath: '/api/auth/login',
  includeAuth: false, // Î°úÍ∑∏Ïù∏ ÏãúÏóêÎäî ÌÜ†ÌÅ∞Ïù¥ ÏóÜÏùå
  logPrefix: 'üîê',
  validateRequest: (req) => {
    const { id, password } = req.body || {};
    if (typeof id !== 'string' || typeof password !== 'string' || !id || !password) {
      return {
        isValid: false,
        error: 'ID and password are required',
      };
    }
    return { isValid: true };
  },
  transformResponse: (data: ProxyLoginResponse): LoginResponse => {
    // ÌÜ†ÌÅ∞ Í¥ÄÎ†® Îç∞Ïù¥ÌÑ∞ Ï†úÍ±∞
    if (data && typeof data === 'object') {
      const { access_token, ...cleanData } = data as any;

      if (cleanData.data && typeof cleanData.data === 'object') {
        const { token, ...cleanNestedData } = cleanData.data;
        cleanData.data = cleanNestedData;
      }

      if (cleanData.user && typeof cleanData.user === 'object') {
        const { access_token: userAccessToken, ...cleanUserData } = cleanData.user;
        cleanData.user = cleanUserData;
      }

      return cleanData as LoginResponse;
    }
    return data as LoginResponse;
  },
});
