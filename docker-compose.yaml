services:
  # Redis Service (Local)
  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    # volumes 제거로 재시작 시 데이터 초기화
    # volumes:
    #   - redis_data:/data
    env_file:
      - ./redis/.env
    volumes:
      - ./redis/entrypoint.sh:/redis/entrypoint.sh:ro
    command: "/bin/sh /redis/entrypoint.sh"
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
        reservations:
          cpus: '0.05'
          memory: 32M

  # Redis 초기화 서비스
  redis-init:
    image: redis:alpine
    container_name: redis-init
    depends_on:
      - redis
    volumes:
      - ./redis-init.sh:/redis-init.sh:ro
    env_file:
      - ./redis/.env
      - ./redis-init/.env
    command: /bin/sh /redis-init.sh
    networks:
      - app-network
    restart: "no"

  db:
    image: postgres:16
    container_name: postgres
    env_file:
      - ./fastify-member-server/.env
    # ports:
    #   - "5432:5432"
    # 확인하고 주석처리
    # volumes 제거로 재시작 시 데이터 초기화
    # volumes:
    #   - ./postgres-data:/var/lib/postgresql/data
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Product Domain Database
  product-db:
    image: postgres:16
    container_name: product-db
    env_file:
      - ./product-domain-server/.env
    # ports:
    #   - "5434:5432"
    # volumes 제거로 재시작 시 데이터 초기화
    # volumes:
    #   - product_db_data:/var/lib/postgresql/data
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  fastify-member-server:
    build:
      context: .
      dockerfile: ./fastify-member-server/Dockerfile
      args:
        - RUN npm install --omit=dev && npm run build
    container_name: fastify-member-server
    env_file:
      - ./fastify-member-server/.env
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
        reservations:
          cpus: '0.15'
          memory: 128M

  koa-auth-server:
    build:
      context: .
      dockerfile: ./koa-auth-server/Dockerfile
    container_name: koa-auth-server
    env_file:
      - ./koa-auth-server/.env
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  bff-server:
    build:
      context: .
      dockerfile: ./bff-server/Dockerfile
    container_name: bff-server
    env_file:
      - ./bff-server/.env
    # ports:
    #   - "3001:3001"
    depends_on:
      product-domain-server:
        condition: service_started
      koa-auth-server:
        condition: service_started
      fastify-member-server:
        condition: service_started
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Product Domain Server
  product-domain-server:
    build:
      context: .
      dockerfile: ./product-domain-server/Dockerfile
    container_name: product-domain-server
    env_file:
      - ./product-domain-server/.env
    # ports:
    #   - '3002:3002'
    depends_on:
      product-db:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
        reservations:
          cpus: '0.15'
          memory: 128M

  # Bun Proxy Server
  proxy-server:
    build:
      context: .
      dockerfile: ./proxy-server/Dockerfile
    container_name: proxy-server
    env_file:
      - ./proxy-server/.env
    environment:
      - NEXT_SERVER=http://ecommerce-app:3000
    ports:
      - '9000:9000'
    depends_on:
      - ecommerce-app
      - redis
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M
        reservations:
          cpus: '0.05'
          memory: 32M

  ecommerce-app:
    build:
      context: .
      dockerfile: ./ecommerce-app/Dockerfile
    container_name: ecommerce-app
    env_file:
      - ./ecommerce-app/.env
    # Next.js 정적 자산 직접 접근을 위해 포트 노출
    ports:
      - '3000:3000'
    depends_on:
      - bff-server
    restart: unless-stopped
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
        reservations:
          cpus: '0.15'
          memory: 128M
  # Kong API Gateway
  kong:
    image: kong:3.9
    container_name: kong
    env_file:
      - ./kong/.env
    volumes:
      - ./kong/kong.yml.template:/tmp/kong.yml.template:ro
      - ./kong/init-kong.sh:/tmp/init-kong-source.sh:ro
      - ./kong/plugins:/usr/local/share/lua/5.1/kong/plugins
    command: >
      /bin/sh -c "
        cp /tmp/init-kong-source.sh /tmp/init-kong.sh &&
        chmod +x /tmp/init-kong.sh &&
        /tmp/init-kong.sh &&
        kong start"
    depends_on:
      - redis
      - fastify-member-server
      - product-domain-server
      - koa-auth-server
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  # Kong Warm-up Service
  kong-warmup:
    image: curlimages/curl:latest
    container_name: kong-warmup
    depends_on:
      - kong
      - bff-server
    volumes:
      - ./warm-up.sh:/warm-up.sh:ro
    env_file:
      - ./kong/.env
    environment:
      - KONG_GATEWAY_URL=http://kong:8000
    command: /bin/sh /warm-up.sh
    networks:
      - app-network
    restart: "no"

# volumes 제거로 재시작 시 데이터 초기화
# volumes:
#   redis_data:
#   product_db_data:

networks:
  app-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: app-network
      # This docker-compose file sets up a multi-container application with PostgreSQL, Fastify, Koa, and Nginx.
      # docker-compose -p rehabilitation-treatment up --build
      # docker-compose -p rehabilitation-treatment up --build -d
